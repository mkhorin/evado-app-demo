{
  "label": "Sidebar menu",
  "description": "Sidebar navigation section",
  "nodes": [
    {
      "name": "simpleData",
      "label": "Simple data",
      "orderNumber": 10,
      "class": "simpleData"
    },
    {
      "parent": "enumerations",
      "name": "enumerationSource",
      "label": "Enumeration source",
      "description": "<div lang=\"en\">\nHelper class as a data source for enumerations.\n</div>\n<div lang=\"ru\">\nВспомогательный класс как источник данных для перечислений.\n</div>",
      "orderNumber": 10,
      "class": "enumerationSource",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "calculated",
      "name": "calculationSource",
      "label": "Calculation source",
      "description": "<div lang=\"en\">\nHelper class as a data source for calculated values.\n</div>\n<div lang=\"ru\">\nВспомогательный класс как источник данных для вычисляемых значений.\n</div>",
      "orderNumber": 10,
      "class": "calculationSource",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "references",
      "name": "articles",
      "label": "Articles",
      "description": "<div lang=\"en\">\nReference types define relationships between objects. The link can be with one or more objects.\n</div>\n<div lang=\"ru\">\nСсылочные типы определяют связь между объектами. Связь может быть с одним или множеством объектов.\n</div>",
      "orderNumber": 10,
      "class": "refArticle",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "inheritance",
      "name": "inheritParent",
      "label": "Parent class",
      "description": "<div lang=\"en\">\n<p>Inheritance extends existing class parameters in a new class.\n<br>Parent class is specified when creating a class and cannot be changed. A class can have only one parent.</p>\n<p>When creating an object from the parent class, a choice of the target class is provided.\n<br>Objects of the descendant classes are displayed in the list of the parent class.\n<br>Using filter, you can search for objects in the list of the parent class by attributes of the descendant classes.\n</p>\n</div>\n<div lang=\"ru\">\n<p>Наследование расширяет параметры существующего класса в новом классе. \n<br>Родительский класс указывается при создании класса и не может быть изменен в дальнейшем. У класса может быть только один родитель.</p>\n<p>При создании объекта из родительского класса предоставляется выбор целевого класса.\n<br>Объекты классов-потомков отображаются в списке родительского класса.\n<br>Используя фильтр, можно искать объекты в списке родительского класса по атрибутам классов-потомков.</p>\n</div>",
      "orderNumber": 10,
      "class": "inheritParent",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "abstract",
      "name": "realChild",
      "label": "Real child",
      "orderNumber": 10,
      "class": "realChild"
    },
    {
      "parent": "activeDescendants",
      "name": "inactiveChild",
      "label": "Inactive child",
      "description": "<div lang=\"en\">\n<p>Objects of this class cannot be created from the parent class, because it is not listed there as an active descendant.</p>\n</div>\n<div lang=\"ru\">\n<p>Объекты данного класса нельзя создать из родительского класса, потому что он не указан там, как активный потомок.</p>\n</div>",
      "orderNumber": 10,
      "class": "inactiveChild",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "versioning",
      "name": "originalVersion",
      "label": "Original version",
      "description": "<div lang=\"en\">\n<p>Versioning is used if you need to modify a class, but keep functionality of existing objects.\n<br>Specify a new version (another class) to create new objects. Objects of all versions will be displayed in the same list.</p>\n<p>Unlike inheritance, the class version has nothing to do with the original.\n<br>It is only necessary to coordinate a list view of objects of different versions.</p>\n</div>\n<div lang=\"ru\">\n<p>Версионирование используется, если нужно модифицировать класс, но сохранить функциональность уже существующих объектов.\n<br>Для этого укажите новую версию (другой класс), по которой будут создаваться новые объекты.\n<br>Объекты всех версий будут отображаться в одном списке.</p>\n<p>В отличие от наследования, версия класса никак не связана с оригиналом.\n<br>Необходимо лишь согласовать представление списка объектов разных версий.</p>\n</div>",
      "orderNumber": 10,
      "class": "versionOriginal",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "navDynamicNodes",
      "name": "navDynamicNode",
      "label": "Dynamic node",
      "description": "This node contains provider settings, which generates dynamic nodes in place of the current one.\nThe mission list is filtered by dynamic node object ID from the request parameter.",
      "orderNumber": 10,
      "class": "navMission",
      "options": {
        "provider": {
          "class": "navPlanet",
          "descriptionAttr": "description"
        },
        "filter": [
          "id",
          "target",
          "$param.id"
        ],
        "showDescription": true
      }
    },
    {
      "parent": "files",
      "name": "s3Files",
      "label": "S3 files",
      "description": "<div lang=\"en\">\n<p>Working with S3 files is implemented through a special class behavior.</p>\n<p>A file attribute is necessary to identify a file in the storage. A special view of the file attribute allows users to upload files to app. \n<br>If necessary, additional attributes are created. For example, file name, size, etc.</p>\n<p><code>S3Storage</code> component is responsible for interacting with S3 repository.\n<br>To start the S3 storage server, use <code>docker run -p 9000:9000 -p 9001:9001 minio/minio server /miniodata --console-address \":9001\"</code>. \n<br>Log in to <code>localhost:9001</code> and create a <code>demo</code> bucket.</p>\n</div>\n<div lang=\"ru\">\n<p>Работа с файлами в облачном хранилище (S3) реализована через специальное поведение класса. </p>\n<p>Обязательный файловый атрибут - это идентификатора файла в хранилище. Особое представление файлового атрибута позволяет пользователям загружать файлы. \n<br>При необходимости создаются дополнительные атрибуты. Например, название файла, размер  и тому подобное.</p>\n<p>За взаимодействие с хранилищем отвечает компонент <code>S3Storage</code>. \n<br>Для запуска S3 сервера используйте команду <code>docker run -p 9000:9000 -p 9001:9001 minio/minio server /miniodata --console-address \":9001\"</code>. \n<br>Войдите в консоль хранилища <code>localhost:9001</code> и создайте <code>demo</code> bucket.</p>\n</div>",
      "orderNumber": 10,
      "class": "s3File",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "viaWordToTheme",
      "name": "viaThemes",
      "label": "Themes",
      "orderNumber": 10,
      "class": "viaTheme"
    },
    {
      "parent": "views",
      "name": "treeView",
      "label": "Tree view",
      "description": "<div lang=\"en\">\n<p>\nThe tree view represents a hierarchical list of objects. \n<br>Each object has a reference to child objects. Child objects can be of any class. \n<br>If parent and children are of the same class (as in this example), then tree level can be recursive. Its depth is determined by references.\n</p>\n</div>\n<div lang=\"ru\">\n<p>\nДревовидный вид представляет иерархический список объектов. \n<br>Каждый объект имеет ссылку на дочерние объекты. Дочерние объекты могут быть любого класса. \n<br>Если родитель и дети одного класса (как в данном примере), то древовидный уровень может быть рекурсивным. Его глубина определяется связями.\n</p>\n</div>",
      "orderNumber": 10,
      "class": "treeViewCategory",
      "view": "rootTreeList",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "depRefData",
      "name": "depRefCountry",
      "label": "Countries",
      "orderNumber": 10,
      "class": "depRefCountry"
    },
    {
      "parent": "viaWordToTheme",
      "name": "viaWords",
      "label": "Words",
      "orderNumber": 20,
      "class": "viaWord"
    },
    {
      "name": "dates",
      "label": "Dates",
      "description": "<div lang=\"en\">\nDates are stored in database in a general way, but are displayed depending on their view type.\n</div>\n<div lang=\"ru\">\nДаты хранятся в базе данных в общем виде, но отображаются в зависимости от типа их представления.\n</div>",
      "orderNumber": 20,
      "class": "dates",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "references",
      "name": "categories",
      "label": "Categories",
      "orderNumber": 20,
      "class": "refCategory"
    },
    {
      "parent": "inheritParent",
      "name": "inheritChild",
      "label": "Child class",
      "orderNumber": 20,
      "class": "inheritChild"
    },
    {
      "parent": "activeDescendants",
      "name": "activeChild",
      "label": "Active child",
      "description": "<div lang=\"en\">\n<p>Objects of this class can be created from the parent class, because it is listed there as an active descendant.</p>\n</div>\n<div lang=\"ru\">\n<p>Объекты данного класса можно создать из родительского класса, потому что он указан там, как активный потомок.</p>\n</div>",
      "orderNumber": 20,
      "class": "activeChild",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "versioning",
      "name": "latestVersion",
      "label": "Latest version",
      "orderNumber": 20,
      "class": "versionLatest"
    },
    {
      "parent": "depRefData",
      "name": "depRefTown",
      "label": "Towns",
      "orderNumber": 20,
      "class": "depRefTown"
    },
    {
      "name": "enumerations",
      "label": "Enumerations",
      "description": "<div lang=\"en\">\nEnumerations provide a choice of one of the defined values. Each value can have a label and a hint.\n</div>\n<div lang=\"ru\">\nПеречисления предоставляют выбор одного из определенных значений. Каждое значение может иметь ярлык и подсказку.\n</div>",
      "orderNumber": 30,
      "class": "enumerations",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "references",
      "name": "comments",
      "label": "Comments",
      "orderNumber": 30,
      "class": "refComment"
    },
    {
      "parent": "inheritChild",
      "name": "grandchild",
      "label": "Grandchild class",
      "orderNumber": 30,
      "class": "inheritGrandchild"
    },
    {
      "parent": "depRefData",
      "name": "depRefStreet",
      "label": "Streets",
      "orderNumber": 30,
      "class": "depRefStreet"
    },
    {
      "name": "calculated",
      "label": "Calculated values",
      "description": "<div lang=\"en\">\nCalculating values are not stored, but are obtained from a given expression.\n</div>\n<div lang=\"ru\">\nВычисляемые значения не хранятся, а рассчитываются из заданного выражения.\n</div>",
      "orderNumber": 40,
      "class": "calculated",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "references",
      "name": "depRefData",
      "label": "Dependent data",
      "description": "<div lang=\"en\">\n<p>Creating a dependent selection of objects using address example .\n<br>The following settings are required for Town:\n</p><ul>\n<li>- create a list view with dependency filter in Town class: <code>{\"country\": \"$dependency.country\"}</code>.</li>\n<li>- create views in Address class - <code>create</code>, <code>edit</code>. If you configure dependent attributes directly in the class, it will be impossible to select any value for search filters.</li>\n<li>- set selection list view with filter for Town attribute in Address views.</li>\n<li>- define data that will be taken for filtering from form: <code>{\"relation\": { \"depends\": \"country\"}}</code>.</li>\n</ul></div>\n<div lang=\"ru\">\n<p>На примере адреса показано создание зависимого выбора объектов.\n<br>Для города необходимы следующие настройки:\n</p><ul>\n<li>- создать в Городе представление списка с фильтром по зависимостям: <code>{\"country\": \"$dependency.country\"}</code>.</li>\n<li>- создать в Адресе представления - <code>create</code>, <code>edit</code>. Если настроить зависимые атрибуты прямо в классе, то невозможно будет выбирать любое значение для поискового фильтра.</li>\n<li>- установить у атрибута Город (в представлениях Адреса) представление списка выбора с фильтром.</li>\n<li>- там же определить какие значения брать с формы для фильтра: <code>{\"relation\": { \"depends\": \"country\"}}</code>.</li>\n</ul></div>",
      "orderNumber": 40,
      "class": "depRefAddress",
      "options": {
        "showDescription": true
      }
    },
    {
      "parent": "references",
      "name": "viaWordToTheme",
      "label": "Intermediate link",
      "description": "<div lang=\"en\">\n<p>The intermediate link stores relationship between classes. In some cases, this optimizes database operation.\n<br>For example, different  words can be associated with different themes.</p>\n</div>\n<div lang=\"ru\">\n<p>Промежуточная связь хранит отношение между классами. В некоторых случаях, это оптимизирует работу базы данных.\n<br>Например, разные слова могут быть связаны с разными темами.</p>\n</div>",
      "orderNumber": 50,
      "class": "viaWordToTheme",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "serviceData",
      "label": "Service data",
      "description": "<div lang=\"en\">\nService data is always stored in objects, regardless of the presence of attributes. For users, this data is read-only.\n</div>\n<div lang=\"ru\">\nСлужебные данные всегда сохраняются в объекте, вне зависимости от наличия атрибутов. Для пользователей эти данные доступны только для чтения.\n</div>",
      "orderNumber": 50,
      "class": "serviceData",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "references",
      "label": "Reference types",
      "orderNumber": 60,
      "type": "container"
    },
    {
      "name": "grouping",
      "label": "Grouping attributes",
      "description": "<div lang=\"en\">\nGroups combine attributes, allowing you to manage many at once.\n<br>In addition, a group can change some of the properties of the attributes included in it.\n</div>\n<div lang=\"ru\">\nГруппы объединяют атрибуты, позволяя управлять множеством за раз.\n<br>Кроме того, группа может изменять некоторые свойства атрибутов, включенных в нее.\n</div>",
      "orderNumber": 70,
      "class": "grouping",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "validation",
      "label": "Validation",
      "description": "<div lang=\"en\">\nValidation rules define object value checks.\n<br>Validators can be built-in (for example, data type, reguired and unique) or be set explicitly on the \"Validators\" tab.\n</div>\n<div lang=\"ru\">\nПравила валидации определяют необходимые проверки значений объектов.\n<br>Валидаторы могут быть встроенными (например, тип данных, обязательность и уникальность) или задаваться явно на вкладке \"Валидаторы\".\n</div>",
      "orderNumber": 80,
      "class": "validation",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "views",
      "label": "Views",
      "description": "<div lang=\"en\">\n<p>Views override attributes and properties of classes for special cases. By default, the following are used:</p>\n<ul>\n<li><code>list</code>  is a view of objects in a list</li>\n<li><code>create</code> is an object creation view</li>\n<li><code>edit</code> is an object edit view</li>\n<li><code>eager</code> is a view of a greedily loaded object</li>\n</ul>\n<p>Access to objects can be restricted by security at the view level. For example, it is allowed to read objects only in the list view.</p>\n</div>\n<div lang=\"ru\">\n<p>Представления переопределяют атрибуты и свойства классов для особых случаев. По умолчанию используются следующие:</p>\n<ul>\n<li><code>list</code> - представление объектов в списке</li>\n<li><code>create</code> - представление объекта при создании</li>\n<li><code>edit</code> - представление объекта при редактировании</li>\n<li><code>eager</code> - представление объекта при жадной загрузке</li>\n</ul>\n<p>Доступ к объектам может быть ограничен безопасностью на уровне представлений. Например, разрешается просматривать объекты только в представлении списка.</p>\n</div>",
      "orderNumber": 90,
      "class": "views",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "actionBinders",
      "label": "Action binders",
      "description": "<div lang=\"en\">\n<p>Attribute action bindings define client-side actions (<code>show</code>, <code>require</code>, <code>enable</code>, <code>value</code>) in the form.</p>\n</div>\n<div lang=\"ru\">\n<p>Настройки действий атрибута определяют действия (<code>видимость</code>, <code>обязательность</code>, <code>доступность</code>, <code>значение</code>) в форме на стороне клиента.</p>\n</div>",
      "orderNumber": 100,
      "class": "actionBinders",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "behaviors",
      "label": "Behaviors",
      "description": "<div lang=\"en\">\n<p>Behaviors extend a standard functionality of classes and views.\n<br>Behavior is a JS class that defines methods for handling object lifecycle events:\n<ul>\n<li><code>afterDefaultValue</code></li>\n<li><code>beforeValidate</code>, <code>afterValidate</code></li>\n<li><code>beforeInsert</code>, <code>afterInsert</code></li>\n<li><code>beforeUpdate</code>, <code>afterUpdate</code></li>\n<li><code>beforeTransit</code>, <code>afterTransit</code></li>\n<li><code>beforeDelete</code>, <code>afterDelete</code></li>\n</ul>\n<p>Multiple behaviors can be included in one class or view.</p>\n</div>\n<div lang=\"ru\">\n<p>Поведения расширяют стандартный функционал классов и представлений.\n<br>Поведение - это JS-класс, в котором определены методы обработки событий жизненного цикла объекта:</p>\n<ul>\n<li><code>afterDefaultValue</code></li>\n<li><code>beforeValidate</code>, <code>afterValidate</code></li>\n<li><code>beforeInsert</code>, <code>afterInsert</code></li>\n<li><code>beforeUpdate</code>, <code>afterUpdate</code></li>\n<li><code>beforeTransit</code>, <code>afterTransit</code></li>\n<li><code>beforeDelete</code>, <code>afterDelete</code></li>\n</ul>\n<p>В один класс или представление может быть добавлено сразу несколько поведений.</p>\n</div>",
      "orderNumber": 110,
      "class": "behaviors",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "files",
      "label": "Files",
      "description": "<div lang=\"en\">\n<p>Working with files is implemented through a special class behavior.</p>\n<p>A file attribute is necessary to identify a file in the storage. A special view of the file attribute allows users to upload files to app. \n<br>If necessary, additional attributes are created. For example, file name, size, etc.</p>\n<p>By default, the local file system is used as storage using <code>FileStorage</code> component.</p>\n</div>\n<div lang=\"ru\">\n<p>Работа с файлами реализована через специальное поведение класса. </p>\n<p>Обязательный файловый атрибут - это идентификатора файла в хранилище. Особое представление файлового атрибута позволяет пользователям загружать файлы. \n<br>При необходимости создаются дополнительные атрибуты. Например, название файла, размер  и тому подобное.</p>\n<p>По умолчанию, с помощью компонента <code>fileStorage</code> как хранилище используется локальная файловая система.</p>\n</div>",
      "orderNumber": 120,
      "class": "file",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "workflow",
      "label": "Workflow",
      "description": "<div lang=\"en\">\n<p>Each object of a class can be in a certain state. The state can have its own view for objects.\n<br>The current object state is stored in the service attribute <code>_state</code>.</p>\n<p>The object states are changed using transitions.\n<br>The transitions can be limited by various conditions, including app security system.</p>\n</div>\n<div lang=\"ru\">\n<p>Каждый объект класса может находиться в определенном состоянии. Состояние может иметь собственное представление для объектов.\n<br>Текущее состояние объекта хранится в служебном атрибуте <code>_state</code>.</p>\n<p>Изменение состояния осуществляется с помощью переходов.\n<br>Переходы могут быть ограничены различными условиями, в том числе и системой безопасности приложения.</p>\n</div>",
      "orderNumber": 130,
      "class": "workflow",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "inheritance",
      "label": "Inheritance",
      "orderNumber": 140,
      "type": "container"
    },
    {
      "parent": "inheritance",
      "name": "abstract",
      "label": "Abstract class",
      "description": "<div lang=\"en\">\n<p>An abstract class can be used as a parent in the class hierarchy, but you cannot create objects of this class.</p>\n</div>\n<div lang=\"ru\">\n<p>Абстрактный класс можно использовать в качестве родительского в иерархии классов, но нельзя создавать объекты этого класса.</p>\n</div>",
      "orderNumber": 140,
      "class": "abstractParent",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "versioning",
      "label": "Versioning",
      "orderNumber": 150,
      "type": "container"
    },
    {
      "parent": "inheritance",
      "name": "activeDescendants",
      "label": "Active descendants",
      "description": "<div lang=\"en\">\n<p>Parent class with selected active descendants.\n<br>Active descendants define classes whose objects can be created from the parent class.</p>\n</div>\n<div lang=\"ru\">\n<p>Родительский класс с выбранными активными потомками.\n<br>Активные потомки определяют классы, объекты которых можно создавать из родительского класса.</p>\n</div>",
      "orderNumber": 150,
      "class": "activeParent",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "listeners",
      "label": "Listeners",
      "description": "<div lang=\"en\">\n<p>Tracking the creation of objects of this class and state transitions, <a href=\"/admin/listener\" target=\"_blank\">the listener</a> performs a specified action - logging on the server.</p>\n</div>\n<div lang=\"ru\">\n<p>Отслеживая создание объектов данного класса и переходы состояний, <a href=\"/admin/listener\" target=\"_blank\">слушатель</a> производит заданное действие - логирование на сервере.</p>\n</div>",
      "orderNumber": 160,
      "class": "listened",
      "options": {
        "showDescription": true
      }
    },
    {
      "name": "navHeader",
      "label": "Navigation",
      "orderNumber": 170,
      "type": "header"
    },
    {
      "name": "navDynamicNodes",
      "label": "Dynamic nodes",
      "description": "<div lang=\"en\">\n<p>To generate menu items from class objects, specify setting <code>{\"provider\": {\"class\": \"className\", \"nameAttr\": \"name\"}}</code>.\n<br>To filter a list based on a dynamic item, specify setting <code>{\"filter\": [\"id\", \"attrName\", \"$param.id\"]}</code></p>\n</div>\n<div lang=\"ru\">\n<p>Для генерации пунктов меню из объектов класса укажите настройку <code>{\"provider\": {\"class\": \"className\", \"nameAttr\": \"name\"}}</code>.\n<br>Для фильтрации списка на основе динамического пункта укажите настройку <code>{\"filter\": [\"id\", \"attrName\", \"$param.id\"]}</code></p>\n</div>",
      "orderNumber": 180,
      "class": "navMission",
      "options": {
        "showDescription": true
      }
    }
  ]
}